<%- include("partials/header.ejs") %>
<div class="w-screen h-screen p-4 bg-black">
    <table class="w-full h-full text-white text-2xl lg:text-4xl">
        <thead>
            <tr>
                <th class="text-left py-4">Player</th>
                <% for(let i = 0; i < cups; i++) { %>
                    <th class="text-center">Cup <%= i + 1 %></th>
                <% } %>
                <th class="text-center">Total</th>
            </tr>
        </thead>
        <tbody>
            <% players.forEach(function(player) { %>
                <tr class="hover:bg-red-900">
                    <td class="py-4"><%= player.name %></td>
                    <% for(let i = 0; i < cups; i++) { %>
                        <td class="text-center">
                            <%= player.strokes[i] || '-' %> <%= player.scores[i] || '' %>
                        </td>
                    <% } %>
                    <td class="text-center font-bold"><%= player.score || '-' %></td>
                </tr>
            <% }); %>
        </tbody>
    </table>
</div>
<script>
async function updateScoreboard() {
    try {
        const scoreboardResponse = await fetch('/api/get-scoreboard');
        const players = await scoreboardResponse.json();
        
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = '';

        players.forEach(player => {
            const row = document.createElement('tr');
            row.className = 'hover:bg-red-900 group';
            row.setAttribute('data-player', player.name);

            const nameCell = document.createElement('td');
            nameCell.className = 'py-4';
            nameCell.textContent = player.name;
            row.appendChild(nameCell);

            const numCups = player.strokes.length || player.scores.length;
            for (let i = 0; i < numCups; i++) {
                const cupCell = document.createElement('td');
                cupCell.className = 'text-center';
                
                const strokeValue = player.strokes[i] || '-';
                const scoreValue = player.scores[i] || '';
                
                let scoreClass = '';
                if (scoreValue) {
                    if (scoreValue.includes('Under') || 
                        ['Eagle', 'Birdie', 'Albatross', 'Condor', 'Hole in One'].includes(scoreValue)) {
                        scoreClass = 'text-green-500 group-hover:text-white';
                    } else if (scoreValue.includes('Over') || 
                             ['Bogey', 'Double Bogey', 'Triple Bogey'].includes(scoreValue)) {
                        scoreClass = 'text-red-500 group-hover:text-white';
                    }
                }
                
                cupCell.innerHTML = `
                    <div class="flex flex-col">
                        <span>${strokeValue}</span>
                        ${scoreValue ? `<span class="${scoreClass}">${scoreValue}</span>` : ''}
                    </div>
                `;
                
                row.appendChild(cupCell);
            }

            const totalCell = document.createElement('td');
            totalCell.className = 'text-center font-bold';
            if (player.score) {
                let totalScoreClass = '';
                if (player.score.includes('Under') || 
                    ['Eagle', 'Birdie', 'Albatross', 'Condor'].includes(player.score)) {
                    totalScoreClass = 'text-green-500 group-hover:text-white';
                } else if (player.score.includes('Over') || 
                         ['Bogey', 'Double Bogey', 'Triple Bogey'].includes(player.score)) {
                    totalScoreClass = 'text-red-500 group-hover:text-white';
                }
                totalCell.innerHTML = `<span class="${totalScoreClass}">${player.score}</span>`;
            } else {
                totalCell.textContent = '-';
            }
            row.appendChild(totalCell);

            tbody.appendChild(row);
        });

        const statusResponse = await fetch('/api/tournament-status');
        const { tournamentFinished } = await statusResponse.json();

        const event = new CustomEvent('tournamentStatusUpdate', {
            detail: { 
                finished: tournamentFinished,
                players: players
            }
        });
        document.dispatchEvent(event);

    } catch (error) {
        console.error('Error updating scoreboard:', error);
    }
}


// Update scoreboard immediately
updateScoreboard();

const updateInterval = 5000; // 5 seconds
setInterval(updateScoreboard, updateInterval);

// Example of how to handle the tournament status update
document.addEventListener('tournamentStatusUpdate', (event) => {
    const { finished, players } = event.detail;
    if (finished) {
        // Find the best score (based on total strokes)
        let bestPlayer = null;
        let lowestStrokes = Infinity;
        
        players.forEach(player => {
            const totalStrokes = player.strokes.reduce((sum, strokes) => sum + (strokes || 0), 0);
            if (totalStrokes > 0 && totalStrokes < lowestStrokes) {
                lowestStrokes = totalStrokes;
                bestPlayer = player.name;
            }
        });

        // Highlight the winner's row
        if (bestPlayer) {
            const winnerRow = document.querySelector(`tr[data-player="${bestPlayer}"]`);
            if (winnerRow) {
                winnerRow.classList.add('bg-green-900');
                winnerRow.classList.remove('hover:bg-red-900');
            }
        }
    }
});
</script>
<%- include("partials/footer.ejs") %>