<%- include("partials/header.ejs") %>
<div class="max-w-md mx-auto">
    <form action="/api/update-scores" method="POST">
        <% for (let i = 0; i < holes; i++) { %>
        
            <div class="flex items-center space-x-4 mb-4">
                <label class="w-24 text-right"><%= i + 1 %>:</label>
                <input 
                    type="number" 
                    class="input w-full hover:border-red-500  focus:border-red-500 focus:ring-red-500 focus:ring-2 focus:outline-none " 
                    name="hole_<%= i + 1 %>" 
                    value="<%= scores[i] || '' %>"
                    min="0"
                    max="2000"
                    placeholder="Enter strokes"
                />
                <% if (locals.pars) { %>
                    <label class="w-24 text-right"> Par <%= pars[i] %></label>
                <% } %>
                 
            </div>
        <% } %>
        <button class="btn w-full" type="submit">Update</button>
    </form>
</div>

<script>
       const form = document.querySelector('form');
const inputs = form.querySelectorAll('input');
const submitButton = form.querySelector('button[type="submit"]');

// Function to toggle form controls
function toggleFormControls(disable) {
   
    inputs.forEach(input => input.readOnly = disable);
    submitButton.disabled = disable;
}

function toggleLock(locks) {
    inputs.forEach((input, index) => {
      
        input.readOnly = Boolean(locks[index]); // Ensure the value is a boolean
    });
}

// Function to fetch scores
async function fetchScores() {
    try {
        const response = await fetch('/api/get-scores', {
            
            credentials: 'include' // This includes cookies in the request
        });
        const data = await response.json();
        if(data.error != undefined)
        {
            alert(data.error);
        }
        else{
            // Update input values with new scores
            data.scores.forEach((score, index) => {
                const input = inputs[index];
                if (input) input.value = score;
            });
        }
    } catch (error) {
        console.error('Error fetching scores:', error);
    }
}

let lastEditTime = 0;
const EDIT_COOLDOWN = 2000; // 2 second cooldown after edits
let waspaused = false
// Main polling function
async function pollMatchStatus() {
    try {
        const now = Date.now();
        const [pauseResponse, locksResponse, editResponse] = await Promise.all([
            fetch('/api/is-match-paused'),
            fetch('/api/get-locks'),
            fetch('/api/is-edited-by-admin', {
            
            credentials: 'include' // This includes cookies in the request
        })
        ]);
        
        const pauseData = await pauseResponse.json();
        const editData = await editResponse.json();
        const locksData = await locksResponse.json();

        //console.log(editData.isEdited)
        if (editData.isEdited == true) {
            lastEditTime = now;
            await fetchScores();
        }
        //console.log(locksData)

        
        // Only fetch scores if we're outside the edit cooldown period
        // if (now - lastEditTime >= EDIT_COOLDOWN && editData.isEdited == true) {
        //     await fetchScores();
        // }
        
        // Update UI state
        if(pauseData.ispaused)
        {    
              
            toggleFormControls(pauseData.ispaused);
        }
        else
        {
            toggleLock(locksData.locks);
             submitButton.disabled= false;
        }
        
    } catch (error) {
        console.error('Error in polling:', error);
    }
}

// Start polling
setInterval(pollMatchStatus, 1000);

</script>
<%- include("partials/footer.ejs") %>
