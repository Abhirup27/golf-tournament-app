<%- include("partials/header.ejs") %>
<div class="max-w-4xl mx-auto p-4">
    <!-- Tournament Creation Section -->
    <div class="mb-4">
        <button onclick="toggleForm('createTournament')" class="w-full bg-gray-800 p-3 text-left text-white hover:bg-gray-700">
            Create Tournament ▼
        </button>
        <div id="createTournament" class="hidden bg-gray-900 p-4">
            <form action="/api/admin/create-tournament" method="POST" class="space-y-4">
                <div>
                    <label class="text-white">Start Date</label>
                    <% if(isOn){%> <label class="right-0 text-right text-red-500 font-bold">(Tournament has started, end it to change)</label> <% }%> 
                    <input type="datetime-local" name="startDate" class="w-full bg-gray-800 text-white p-2 rounded" value = <%= tournament.startDate %> <% if(isOn) { %>  readonly  <%}%>  required>

                </div>
                <div>
                    <label class="text-white">End Date</label>
                    <input type="datetime-local" name="endDate" class="w-full bg-gray-800 text-white p-2 rounded" value=<%= tournament.endDate %>>
                </div>
                <div>
                    <label class="text-white">Number of Cups</label>
                    <input type="number" name="cups" class="w-full bg-gray-800 text-white p-2 rounded" value=<%= tournament.cups %> required>
                </div>
                <div>
                    <label class="text-white">Maximum handicap</label>
                    <input type="number" name="mHandicap" class="w-full bg-gray-800 text-white p-2 rounded" value=<%= tournament.mHandicap %> required>
                </div>
                <div>
                    <label class="text-white">Total Par</label>
                    <input type="number" name="par" class="w-full bg-gray-800 text-white p-2 rounded" value=<%= tournament.par %> readonly required>
                </div>
                <div>
                    <label class="text-white">Pars for each cup</label>
                    <div class="grid grid-cols-6 gap-2">
                        <% for(let i = 0; i < tournament.cups; i++) { %>
                            <div>
                                <label class="text-white text-sm">Cup <%= i + 1 %></label>
                                <input type="number" name="pars[]" class="w-full bg-gray-800 text-white p-2 rounded" oninput="updateTotalPar()" value=<%= tournament.pars[i] %> required>
                            </div>
                        <% } %>
                    </div>
                </div>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                    Create Tournament
                </button>
            </form>
        </div>
    </div>

    <!-- Tournament Controls Section -->
    <div class="mb-4">
        <button onclick="toggleForm('tournamentControls')" class="w-full bg-gray-800 p-3 text-left text-white hover:bg-gray-700">
            Tournament Controls ▼
        </button>
        <div id="tournamentControls" class="hidden bg-gray-900 p-4">
            <div class="space-x-4">
                <form action="/api/admin/<%- (paused) ? 'restart' : (idle) ? 'start' : 'pause' %>-tournament" method="post">
                    <button class="<%- (paused) ? 'bg-green-600 hover:bg-green-700' : 'bg-yellow-600 hover:bg-yellow-700' %> text-white px-4 py-2 rounded">
                        <%- (paused) ? 'Restart' : (idle) ? 'Start' : 'Pause' %> Tournament
                    </button>
                </form>
                <form action="/api/admin/stop-tournament" onsubmit="return confirm('Are you sure you want to end the tournament? This will calculate the final score of the players and they would not be able to set scores.')" method="post">
                    <button class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                    End Tournament
                    </button>
                </form>
                
            </div>
        </div>
    </div>

<!-- Scoreboard Controls Section -->
<div class="mb-4">
    <button onclick="toggleForm('scoreboardControls')" class="w-full bg-gray-800 p-3 text-left text-white hover:bg-gray-700">
        Scoreboard Controls ▼
    </button>
    <div id="scoreboardControls" class="hidden bg-gray-900 p-4">
        <div class="flex justify-end mb-4">
            <button id="editScoresButton" onclick="toggleScoreEditing()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700" <% if(!paused && !idle){ %>disabled=disable <% } %> >
                Edit Scores
            </button>
            <button id="saveScoresButton" onclick="saveScores()" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 ml-2 hidden">
                Save Changes
            </button>
        </div>
        <table class="w-full text-white">
            <thead>
                <tr>
                    <th class="p-3 text-left">Cup</th>
                    <% players.forEach(function(player) { %>
                        <th class="p-3 text-center"><%= player.name %></th>
                    <% }); %>
                    <th class="p-3 text-center">Lock/Unlock</th>
                </tr>
            </thead>
            <tbody>
                <% for(let i = 0; i < cups; i++) { %>
                    <tr class="hover:bg-gray-800">
                        <td class="p-3">Cup <%= i + 1 %></td>
                        <% players.forEach(function(player, playerIndex) { %>
                            <td class="p-3 text-center">
                                <span class="score-display"><%= player.strokes[i] || '-' %></span>
                                <input type="number" 
                                       class="score-input hidden w-full bg-gray-700 text-white p-1 rounded"
                                       data-player-index="<%= playerIndex %>"
                                       data-cup-index="<%= i %>"
                                       value="<%= player.strokes[i] || '' %>"
                                       data-original-value="<%= player.strokes[i] || '' %>"
                                       >
                            </td>
                        <% }); %>
                        <td class="p-3 text-center">
                            <label class="relative inline-flex items-center cursor-pointer">
                                <input name="cupLocks[]" type="checkbox" class="sr-only peer" <%= tournament.cupLocks[i] ? 'checked' : '' %> onchange="toggleCupLock(<%= i %>)">
                                <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                            </label>
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</div>

 <!-- Player Controls Section -->
    <div class="mb-4">
        <button onclick="toggleForm('playerControls')" class="w-full bg-gray-800 p-3 text-left text-white hover:bg-gray-700">
            Player Controls ▼
        </button>
        <div id="playerControls" class="hidden bg-gray-900 p-4">
            <button onclick="toggleAddPlayerForm()" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 mb-4">
                Add Player
            </button>
            
            <!-- Add Player Form -->
            <div id="addPlayerForm" class="hidden mb-4 bg-gray-800 p-4 rounded">
                <form action="/api/admin/add-player" method="POST" class="space-y-4">
                    <div>
                        <label class="text-white">Name</label>
                        <input type="text" name="name" class="w-full bg-gray-700 text-white p-2 rounded" required>
                    </div>
                    <div>
                        <label class="text-white">Email</label>
                        <input type="email" name="email" class="w-full bg-gray-700 text-white p-2 rounded" required>
                    </div>
                    <div>
                        <label class="text-white">Handicap</label>
                        <input type="number" name="handicap" class="w-full bg-gray-700 text-white p-2 rounded" required min="0" max=max=<%if(locals.mHandicap){%>"<%=mHandicap%>" <%} else {%> "54" <%}%> >
                    </div>
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                        Submit
                    </button>
                </form>
            </div>
            <div id="editPlayerForm" class="hidden mb-4 bg-gray-800 p-4 rounded">
                <form action="/api/admin/edit-player" method="POST" class="space-y-4">
                    <input type="hidden" name="playerId" id="editPlayerId">
                    <div>
                        <label class="text-white">Name</label>
                        <input type="text" name="name" id="editPlayerName" class="w-full bg-gray-700 text-white p-2 rounded" required>
                    </div>
                    <div>
                        <label class="text-white">Email</label>
                        <input type="email" name="email" id="editPlayerEmail" class="w-full bg-gray-700 text-white p-2 rounded" required>
                    </div>
                    <div>
                        <label class="text-white">Handicap</label>
                        <input type="number" name="handicap" id="editPlayerHandicap" class="w-full bg-gray-700 text-white p-2 rounded" required >
                    </div>
                    <div class="flex space-x-2">
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
                            Save Changes
                        </button>
                        <button type="button" onclick="toggleEditPlayerForm()" class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
            <!-- Players Table -->
            <div class="overflow-x-auto">
                <table class="w-full text-white">
                    <thead>
                        <tr class="bg-gray-800">
                            <th onclick="toggleIds()" class="p-3 text-left cursor-pointer hover:bg-gray-700">ID <span id="idToggle">▶</span></th>
                            <th class="p-3 text-left">Name</th>
                            <th class="p-3 text-left">Email</th>
                            <th class="p-3 text-left">Handicap</th>
                            <th class="p-3 text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <%let showFullIds = false;
                        function formatId(id) {
                            return showFullIds ? id : `${id.slice(0, 3)}...${id.slice(-5)}`;
                        }%>
                        <% players.forEach(function(player) { %>
                            <tr class="border-t border-gray-700">
                                <td class="p-3 player-id" data-full-id="<%= player.id %>">
                                    <%= formatId(player.id) %>
                                </td>
                                <td class="p-3"><%= player.name %></td>
                                <td class="p-3"><%= player.email %></td>
                                <td class="p-3"><%= player.handicap || 'N/A' %></td>
                                <td class="p-3 text-center">
                                    <button onclick="editPlayer('<%= player.id %>')" class="bg-yellow-600 text-white px-3 py-1 rounded hover:bg-yellow-700 mr-2">
                                        Edit
                                    </button>
                                    <button onclick="deletePlayer('<%= player.id %>')" class="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>


<script>
   const players = JSON.parse('<%- JSON.stringify(players) %>');
  var hasUserReadAdmin = [<%= players.map(player => !player.isEditedByAdmin).join(',') %>];

function toggleForm(formId) {
    // Hide all forms first
    ['createTournament', 'tournamentControls', 'scoreboardControls', 'playerControls'].forEach(id => {
        document.getElementById(id).classList.add('hidden');
    });
    // Show the selected form
    document.getElementById(formId).classList.remove('hidden');
}

function toggleCupLock(cupIndex) {
    fetch('/api/admin/toggle-cup-lock', {
        credentials: 'include', // This includes cookies in the request
        
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ cupIndex })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // You can add visual feedback here
            console.log(`Cup ${cupIndex + 1} lock toggled`);
        }
    })
    .catch(error => console.error('Error:', error));
}

let showFullIds = false;

function formatId(id) {
    return showFullIds ? id : `${id.slice(0, 3)}...${id.slice(-5)}`;
}

function toggleIds() {
    showFullIds = !showFullIds;
    const idCells = document.querySelectorAll('.player-id');
    idCells.forEach(cell => {
        cell.textContent = formatId(cell.dataset.fullId);
    });
}

const totalParInput = document.querySelector('input[name="par"]');
// Select the "cups" input and the div containing the pars
const cupsInput = document.querySelector('input[name="cups"]');
const parsContainer = document.querySelector('div.grid.grid-cols-6.gap-2');

// Function to update the pars based on the number of cups
function updatePars() {
  const cups = parseInt(cupsInput.value, 10) || 0;

  // Get the existing values from the inputs
  const existingValues = Array.from(parsContainer.querySelectorAll('input[name="pars[]"]'))
    .map(input => input.value);

  // Clear the current content
  parsContainer.innerHTML = '';

  // Generate new pars input fields
  for (let i = 0; i < cups; i++) {
    const div = document.createElement('div');

    const label = document.createElement('label');
    label.className = 'text-white text-sm';
    label.textContent = `Cup ${i + 1}`;

    const input = document.createElement('input');
    input.type = 'number';
    input.name = 'pars[]';
    input.className = 'w-full bg-gray-800 text-white p-2 rounded';
    input.required = true;

    // Preserve the existing value if it exists
    if (existingValues[i] !== undefined) {
      input.value = existingValues[i];
    }

    input.addEventListener('input', updateTotalPar);

    div.appendChild(label);
    div.appendChild(input);
    parsContainer.appendChild(div);
    updateTotalPar();
  }
}

function updateTotalPar() {
  const parsInputs = parsContainer.querySelectorAll('input[name="pars[]"]');
  const total = Array.from(parsInputs).reduce((sum, input) => {
    const value = parseInt(input.value, 10);
    return sum + (isNaN(value) ? 0 : value);
  }, 0);

  // Update the Total Par input
  totalParInput.value = total;
}


// Add event listener to the cups input field
cupsInput.addEventListener('input', updatePars);

// Auto-update scoreboard every 5 seconds when scoreboard controls are visible
let updateInterval;
// document.getElementById('scoreboardControls').addEventListener('show', function() {
//     updateScoreboard();
    updateInterval = setInterval(updateScoreboard, 5000);
// });

document.getElementById('scoreboardControls').addEventListener('hide', function() {
    clearInterval(updateInterval);
});

function toggleScoreEditing() {
    const displays = document.querySelectorAll('.score-display');
    const inputs = document.querySelectorAll('.score-input');
    const editButton = document.getElementById('editScoresButton');
    const saveButton = document.getElementById('saveScoresButton');
    
    displays.forEach(display => display.classList.toggle('hidden'));
    inputs.forEach(input => input.classList.toggle('hidden'));
    editButton.classList.toggle('hidden');
    saveButton.classList.toggle('hidden');
}

function saveScores() {
    const inputs = document.querySelectorAll('.score-input');
    const playerScores = {};
    const editedCells = new Map();

    inputs.forEach(input => {
        const playerIndex = parseInt(input.dataset.playerIndex);
        const cupIndex = input.dataset.cupIndex;
        const originalValue = input.getAttribute('data-original-value');
        const currentValue = input.value;
        
        if (!playerScores[playerIndex]) {
            playerScores[playerIndex] = {
                scores: new Array(parseInt(cupsInput.value)).fill(null),
                isEditedByAdmin: false
            };
        }

        if (!editedCells.has(playerIndex)) {
            editedCells.set(playerIndex, false);
        }

        if (originalValue !== currentValue) {
            editedCells.set(playerIndex, true);
        }

        playerScores[playerIndex].scores[cupIndex] = currentValue ? parseInt(currentValue) : null;
    });

    for (const [playerIndex, wasEdited] of editedCells) {
        playerScores[playerIndex].isEditedByAdmin = wasEdited || !hasUserReadAdmin[playerIndex];
    }
    
    fetch('/api/admin/update-scores', {
            
        credentials: 'include', // This includes cookies in the request
        
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ playerScores })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            toggleScoreEditing();
            //updateScoreboard();
            window.location.href= '/api/admin?paused=true';
        } else {
            alert('Failed to update scores');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to update scores');
    });
}


function updateScoreboard() {
    fetch('/api/admin/get-data', {        
            credentials: 'include' // This includes cookies in the request
        })
        .then(response => response.json())
        .then(data => {
             hasUserReadAdmin = data.players.map(player => !player.isEditedByAdmin);

           
                const form = document.querySelector('#tournamentControls form');
                const button = form.querySelector('button');
                
                if (data.idle) {
                    form.action = '/api/admin/start-tournament';
                    button.innerHTML = 'Start Tournament';
                    button.className = 'bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700';
                } else if(data.paused){
                    form.action = '/api/admin/start-tournament';
                    button.innerHTML = 'Resume Tournament';
                    button.className = 'bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700';
                }
                else
                {
                    form.action = '/api/admin/pause-tournament';
                    button.innerHTML = 'Pause Tournament';
                    button.className = 'bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700';
                }
            

          if(!data.paused) {
                const players = data.players;
                const cups = data.cups;
                const scoreboardControls = document.getElementById('scoreboardControls');

                if (scoreboardControls) {
                    const existingTable = scoreboardControls.querySelector('table');
                    if (existingTable) {
                        const tbody = existingTable.querySelector('tbody');
                        const rows = tbody.querySelectorAll('tr');
                        
                        // If rows don't exist, create them. Otherwise just update scores
                        if (rows.length === 0) {
                            // Create new rows
                            for (let i = 0; i < cups; i++) {
                            const row = document.createElement("tr");
                            row.className = "hover:bg-gray-800";

                            const cupCell = document.createElement("td");
                            cupCell.className = "p-3";
                            cupCell.textContent = `Cup ${i + 1}`;
                            row.appendChild(cupCell);

                            players.forEach((player, playerIndex) => {
                                const strokeCell = document.createElement("td");
                                strokeCell.className = "p-3 text-center";
                                
                                const display = document.createElement("span");
                                display.className = "score-display";
                                display.textContent = player.strokes[i] !== undefined ? player.strokes[i] : "-";
                                
                                const input = document.createElement("input");
                                input.type = "number";
                                input.className = "score-input hidden w-full bg-gray-700 text-white p-1 rounded";
                                input.dataset.playerIndex = playerIndex;
                                input.dataset.cupIndex = i;
                                input.value = player.strokes[i] || '';
                                input.setAttribute('data-original-value', player.strokes[i] || '');
                                strokeCell.appendChild(display);
                                strokeCell.appendChild(input);
                                row.appendChild(strokeCell);
                            });

                            const lockCell = document.createElement("td");
                            lockCell.className = "p-3 text-center";
                            lockCell.innerHTML = `
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" class="sr-only peer" onchange="toggleCupLock(${i})">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                                </label>
                            `;
                            row.appendChild(lockCell);

                            tbody.appendChild(row);
                        }
                           } else {
                // Just update the scores, don't touch the lock checkboxes
                rows.forEach((row, i) => {
                    const scoreCells = row.querySelectorAll('td:not(:first-child):not(:last-child)');
                    scoreCells.forEach((cell, playerIndex) => {
                        const display = cell.querySelector('.score-display');
                        const input = cell.querySelector('.score-input');
                        if (display && input) {
                            const score = players[playerIndex].strokes[i];
                            display.textContent = score !== undefined ? score : "-";
                            input.value = score || '';
                            input.setAttribute('data-original-value', score || '');
                        }
                    });
                });
            }
        }
    }
}
        })
        .catch(error => console.error('Error:', error));
}

 function toggleAddPlayerForm() {
        const form = document.getElementById('addPlayerForm');
        form.classList.toggle('hidden');
    }

    function deletePlayer(playerId) {
        if (confirm('Are you sure you want to remove this player?')) {
            fetch(`/api/admin/delete-player/${playerId}`, {
                method: 'DELETE',
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                     window.location.href= '/api/admin?Pdeleted=true';
                } else {
                    alert('Failed to delete player');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to delete player');
            });
        }
    }

    function editPlayer(playerId) {
        const player = players.find(p => p.id === playerId);
        if (player) {
            document.getElementById('editPlayerId').value = player.id;
            document.getElementById('editPlayerName').value = player.name;
            document.getElementById('editPlayerEmail').value = player.email;
            document.getElementById('editPlayerHandicap').value = player.handicap || '';
                    
            document.getElementById('editPlayerForm').classList.remove('hidden');
            document.getElementById('addPlayerForm').classList.add('hidden');
        }
        }

        function toggleEditPlayerForm() {
            document.getElementById('editPlayerForm').classList.add('hidden');
        }

            // Make players data available to JavaScript
           

</script>
<%- include("partials/footer.ejs") %>